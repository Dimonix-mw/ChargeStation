// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaymentService.Persistence;

#nullable disable

namespace PaymentService.Persistence.Migrations
{
    [DbContext(typeof(PaymentServiceDbContext))]
    [Migration("20220908150126_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PaymentService.Domain.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Filials");
                });

            modelBuilder.Entity("PaymentService.Domain.Filling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BonusAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("BonusCalculateRuleId")
                        .HasColumnType("integer");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<decimal>("PromotionAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<int>("PumpId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalMoneyAmount")
                        .HasColumnType("numeric");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Fillings");
                });

            modelBuilder.Entity("PaymentService.Domain.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<int>("PumpModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PumpModelId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("PaymentService.Domain.Pump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("integer");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModelId");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("PaymentService.Domain.PumpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("is_quick_charge")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PumpModels");
                });

            modelBuilder.Entity("PaymentService.Domain.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FillingId")
                        .HasColumnType("integer");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FillingId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PaymentService.Domain.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PaymentService.Domain.Filling", b =>
                {
                    b.HasOne("PaymentService.Domain.User", null)
                        .WithMany("Filings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PaymentService.Domain.Price", b =>
                {
                    b.HasOne("PaymentService.Domain.Filial", "Filial")
                        .WithMany("Prices")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.PumpModel", "PumpModel")
                        .WithMany("Prices")
                        .HasForeignKey("PumpModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("PumpModel");
                });

            modelBuilder.Entity("PaymentService.Domain.Pump", b =>
                {
                    b.HasOne("PaymentService.Domain.Filial", "Filial")
                        .WithMany("Pumps")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.PumpModel", "Model")
                        .WithMany("Pumps")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("PaymentService.Domain.Session", b =>
                {
                    b.HasOne("PaymentService.Domain.Filling", "Filling")
                        .WithOne()
                        .HasForeignKey("PaymentService.Domain.Session", "FillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentService.Domain.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filling");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentService.Domain.Filial", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Pumps");
                });

            modelBuilder.Entity("PaymentService.Domain.PumpModel", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Pumps");
                });

            modelBuilder.Entity("PaymentService.Domain.User", b =>
                {
                    b.Navigation("Filings");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
